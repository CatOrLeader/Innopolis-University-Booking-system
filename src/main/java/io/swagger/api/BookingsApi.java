/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Booking;
import io.swagger.model.HTTPValidationError;
import io.swagger.model.QueryBookingsRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-07-03T12:05:04.344081226Z[GMT]")
@Validated
public interface BookingsApi {

    @Operation(summary = "Delete A Booking", description = "", security = {
        @SecurityRequirement(name = "Bearer")    }, tags={ "Booking" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Booking was deleted successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))),
        
        @ApiResponse(responseCode = "401", description = "API token was not provided, is invalid or has been expired"),
        
        @ApiResponse(responseCode = "404", description = "Booking with such ID is not found"),
        
        @ApiResponse(responseCode = "422", description = "Validation Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HTTPValidationError.class))) })
    @RequestMapping(value = "/bookings/{booking_id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Object> deleteABookingBookingsBookingIdDelete(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("booking_id") String bookingId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema( defaultValue="en-US")) @RequestHeader(value="Accept-Language", required=false) String acceptLanguage);


    @Operation(summary = "Query Bookings", description = "", security = {
        @SecurityRequirement(name = "Bearer")    }, tags={ "Booking" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful Response", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Booking.class)))),
        
        @ApiResponse(responseCode = "401", description = "API token was not provided, is invalid or has been expired"),
        
        @ApiResponse(responseCode = "422", description = "Validation Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = HTTPValidationError.class))) })
    @RequestMapping(value = "/bookings/query",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<Booking>> queryBookingsBookingsQueryPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody QueryBookingsRequest body, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema( defaultValue="en-US")) @RequestHeader(value="Accept-Language", required=false) String acceptLanguage);

}

